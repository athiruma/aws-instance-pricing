# # This workflow will install Python dependencies, run tests and lint with a single version of Python
# # For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

# name: InstancePricing

# on:
#  # schedule:
#    # - cron: '0 0 * * 1' # run it on Monday
#   workflow_dispatch:

# jobs:

#   bump_version:
#     name: update instance pricing
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - name: Set up Python3.8
#         uses: actions/setup-python@v4
#         with:
#           python-version: 3.8
#       - name: 🎁 Bump Version
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
#         run: |
#           git checkout main
#           git config --global user.email ${{ secrets.EMAIL }}
#           git config --global user.name  ${{ secrets.NAME }}
#           git config pull.rebase false  # merge (the default strategy)
#           # GITHUB_REPOSITORY already taken => GIT_REPOSITORY
#           # pip3 install boto3
#           # python3 aws/instances_types.py
#           # git add instance_pricing.json
#           date >> File.txt
#           git add File.txt
#           git commit -m 'Updated the instance pricing'
#           git pull https://${{ secrets.TOKEN }}@${{ secrets.GIT_REPOSITORY}} main
#           git push https://${{ secrets.TOKEN }}@${{ secrets.GIT_REPOSITORY}} main


name: CloudGovernanceDailyPolicies

on:
  workflow_dispatch:

jobs:
  run_policies:
    name: run_policies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}
      - name: Run the CloudGovernance Policies
        env:
          OUTPUT_LOGS: ${{ secrets.OUTPUT_LOGS }}
          ERROR_LOGS: ${{ secrets.ERROR_LOGS }}
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
        run: |
          podman run --rm --name cloud-governance -e policy="ec2_idle" -e AWS_ACCESS_KEY_ID="" -e AWS_SECRET_ACCESS_KEY="" -e AWS_DEFAULT_REGION="ap-south-1"  -e log_level=INFO quay.io/ebattat/cloud-governance > /dev/null
          #cat /tmp/access.logs
          #cat $OUTPUT_LOGS
          #podman run --rm --name cloud-governance -e policy="ec2_idle" -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" -e AWS_DEFAULT_REGION="ap-south-1"  -e log_level=INFO quay.io/ebattat/cloud-governance 1> $OUTPUT_LOGS 2> $ERROR_LOGS
          #cat $ERROR_LOGS
          #cat $OUTPUT_LOGS
        
      
